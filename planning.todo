Culture Power - Third Module's Back-End Project Planning:

👉 What is this project about? Is a game-changing application for a company.
👉 Starting at = 22/01/24 at 5:23pm.
👉 Finishing at = 
👉 Final date to project's delivering: 18/02/24 at 11:59pm.

/////////////////////////////////////////

_1st Part_ - *Planning and Setup*:
  1. First things first:
    ✔ Make repository called: project-module-3. @done(24-01-22 21:50)
    ✔ Make all the "Starting the project" part. @done(24-01-22 21:51)
    ☐ Make all the "Structuring the project:" part.

  2. Starting the project:
    1. Development's Environment:
        ✔ First command ever: `npm init -y`; @done(24-01-22 21:37)
        ✔ Install all necessary dependencies: `npm i typescript tsx tsup @types/express @types/bcrypt @types/multer @types/jsonwebtoken -D`; @done(24-01-22 21:37)
    2. Production's Environment:
        ✔ Install all necessary dependencies: `npm i mongoose yup bcrypt express dotenv vitest ts-node jsonwebtoken multer`; @done(24-01-22 21:37)
    3. Generate important files: 
        ✔ To generate the tsconfig.json file: `npx tsc --init` @done(24-01-22 21:37)
    
  3. Structuring the project:
    1. Creating the layers: 

       ✔ **src/** @done(24-01-22 21:58)
         ☐ **config/**
            ☐ `db.ts`: Database configuration.
            ☐ `dotenv.ts`: Configuration of environment variables as an object.
         
          ☐ **modules/**
            ☐ **admin/**
              ☐ *controller/*
               ☐ `admin.controller.ts`: Controller for admin-related operations.
              ☐ *model/*
               ☐ `admin.model.ts`: Model for the admin entity.
              ☐ *repository/*
               ☐ `admin.repository.ts`: Database access for the admin entity.
              ☐ *routes/*
               ☐ `admin.routes.ts`: Routes related to admins.
              ☐ *service/*
               ☐ `admin.service.ts`: Use cases related to admins.
              ☐ *dto/*
               ☐ `admin.dto.ts`: Data Transfer Object (DTO) for admin.
              ☐ *tests/*
               ☐ `admin.service.spec.ts`: Tests related to admin's service.

            ☐ **product/**
              ☐ *controller/*
               ☐ `product.controller.ts`: Controller for product-related operations.
              ☐ *model/*
               ☐ `product.model.ts`: Model for the product entity.
              ☐ *repository/*
               ☐ `product.repository.ts`: Database access for the product entity.
              ☐ *routes/*
               ☐ `product.routes.ts`: Routes related to products.
              ☐ *service/*
               ☐ `product.service.ts`: Use cases related to products.
              ☐ *dto/*
               ☐ `product.dto.ts`: Data Transfer Object (DTO) for product.
              ☐ *tests/*
               ☐ `product.service.spec.ts`: Tests related to product's service.

            ☐ **user/**
              ☐ *controller/*
               ☐ `user.controller.ts`: Controller for user-related operations.
              ☐ *model/*
               ☐ `user.model.ts`: Model for the user entity.
              ☐ *repository/*
               ☐ `user.repository.ts`: Database access for the user entity.
              ☐ *routes/*
               ☐ `user.routes.ts`: Routes related to users.
              ☐ *service/*
               ☐ `user.service.ts`: Use cases related to users.
              ☐ *dto/*
               ☐ `user.dto.ts`: Data Transfer Object (DTO) for user.
              ☐ *tests/*
               ☐ `user.service.spec.ts`: Tests related to user's service.
            
          ☐ **middlewares/**
            ☐ `authMiddleware.ts`: Middleware for authentication using JWT.
         
          ☐ **utils/**
            ☐ `errorHandler.ts`: Utility for error handling.
            ☐ `validator.ts`: Utility for validations.
         
          ✔ `.env`: Environment variables configuration file. @done(24-01-22 21:59)
          ✔ `.env.example`: Explaining how the environment variables configuration file should be. @done(24-01-22 21:59)
          ☐ `app.ts`: Server configuration and Express application.
          ☐ `server.ts`: Server entry point.
          ✔ `.gitignore`: File made for ignoring some files and folders, that we don't want people to see. @done(24-01-22 21:59)
          ✔ `package.json`: Project dependencies and scripts. @done(24-01-22 21:59)
          ☐ `README.md`: Project documentation.

       ✔ **uploads/** @done(24-01-22 21:58)
          This folder is suposed to keep every image downloaded by multer's library.

    2. Configs:
        ☐ Make connection with MongoDB.
        ☐ Initialize server with Express.
        ✔ Prepare all environment variables: MONGO_URL - JWT_TOKEN - PORT - BASE_URL @done(24-01-22 21:56)
        ☐ Make all models in application.
        ☐ Make all the layers inside every model.

/////////////////////////////////////////

  _2nd Part_ - *All Feature's Development*:
     ☐ Use Cases: 
        ☐ => User Registration: 
          ☐ Required Information: 
            ☐ Name 
            ☐ E-mail
            ☐ Password
            ☐ Photo
          ☐ Rules: 
            ☐ Do not allow registration if a user with the same e-mail address already exists.
            ☐ Encrypt the password before storing it in the database.

        ☐ => User Login: 
          ☐ Required Information: 
            ☐ E-mail
            ☐ Password
          ☐ Rules: 
            ☐ Do not generate a token if there is no user with the e-mail provided.
            ☐ Do not generate a token if the password sent is not compatible with the one in the database.
            ☐ Generate a token and return if the credentials are correct.
 
        ☐ => Admin Login:
          ☐ Required Information:
            ☐ E-mail
            ☐ Password
          ☐ Rules: 
            ☐ Do not generate a token if there is no admin with the e          mail provided.
            ☐ Do not generate a token if the password sent is not compatible with the one in the database.
            ☐ Generate a token and return if the credentials are correct.

        ☐ => View Logged In User (PRIVATE ROUTE)
          ☐ Action:
            ☐ Return the logged in user's data.

        ☐ => Product Registration (PRIVATE ROUTE - ADMIN)
          ☐ Required Information:
            ☐ Name
            ☐ Value
            ☐ Quantity
            ☐ Description
            ☐ Photo
          ☐ Rules:
            ☐ Do not allow sending if the user performing the action is not an administrator.

        ☐ => Product Editing (PRIVATE ROUTE - ADMIN)
          ☐ Required Information:
            ☐ Name
            ☐ Value
            ☐ Quantity
            ☐ Description
            ☐ Photo
          ☐ Rules:
            ☐ Do not allow sending if the user performing the action is not an administrator.

        ☐ => List All Products (PRIVATE ROUTE)
          ☐ Rules:
            ☐ Must list products with a quantity greater than 0.

        ☐ => Search Product by ID (PRIVATE ROUTE)
          ☐ Required Information:
            ☐ ID
          ☐ Action:
            ☐ Should return the product if found.

        ☐ => Send Jewel to User (PRIVATE ROUTE - ADMIN)
          ☐ Required Information:
            ☐ Jewel Quantity
            ☐ User ID
          ☐ Rules:
            ☐ Do not allow sending if the user does not exist.
            ☐ Do not allow sending if the user performing the action is not an administrator.

        ☐ => Redeem Product (PRIVATE ROUTE)
          ☐ Required Information
            ☐ Product ID
            ☐ User ID
          ☐ Rules
            ☐ Do not allow redemption if the product or user does not exist.
            ☐ Do not allow redemption if the user does not have enough gems.
            ☐ Decrease the value of the product by the number of jewels.
            ☐ Decrement the product quantity.

/////////////////////////////////////////

  _3rd Part_ - *Tests and Adjustments*:
    ☐ Create all ".spec" file for all layers.
  _4th Part_ - *Deploy and Documentation*:
    ☐ 